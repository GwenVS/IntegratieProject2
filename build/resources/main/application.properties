# Option 1: use in-memory H2 database
#spring.datasource.url=jdbc:h2:mem:KandoeDB;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
# Option 2: instead of in-memory database a standalone H2 server can also be used
# Download H2 Server Platform-Independent Zip file from http://www.h2database.com/html/download.html
# Start a H2 server from command line with: java -cp h2*.jar org.h2.tools.Server and use

spring.datasource.url=jdbc:postgresql://ec2-54-204-45-43.compute-1.amazonaws.com:5432/dam3nl7nf6u3ga?user=copikjmjliwxyn&password=64f857708970e0583fde9e45b54aa1d4e192baf8057f1170f11c3a18b96f49bb&sslmode=require
spring.datasource.username=copikjmjliwxyn
spring.datasource.password=64f857708970e0583fde9e45b54aa1d4e192baf8057f1170f11c3a18b96f49bb
spring.datasource.driverClassName=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=create

#spring.datasource.data=classpath:/sql/data.sql
spring.jpa.properties.org.hibernate.flushMode=ALWAYS

server.port=9090

logging.level.org.springframework.web=ERROR


#File settings (size is in MB)
file.max.size=100000
temp.folder=/tmp



#Jwt Settings
app.name=Kandoe
jwt.header=Authorization
jwt.expires_in=3600
jwt.mobile_expires_in:3600
jwt.secret=CPPStaatVoorCaraPilsPremium